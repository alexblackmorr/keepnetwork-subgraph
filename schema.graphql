enum StakingState{
  STAKED,
  RECOVERED_STAKED,
  STAKED_LOCK,
  UNDELEGATED,
  LOCK_RELEASED,
  EXPIRED_LOCK_RELEASED,
  SLASHED,
  SEIZED
}

type Approval @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  value: BigInt!
  owner: Bytes
  spender: Bytes
}

type Transfer @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  timestamp: BigInt!
  "cTokens transferred"
  value: BigDecimal!
  "Account that sent tokens"
  from: Bytes
  "Account that received tokens"
  to: Bytes
  gasUsed: BigInt!
  gasPrice: BigDecimal!
}

type Governance @entity{
  id: ID!
  name: String!
  symbol: String!
  contractAddress: String!
  decimals: Int!
  maxSupply: BigInt!
  totalTokenHolders: BigInt!
  currentTokenHolders: BigInt!
}

type TokenHolder @entity{
  id: ID!
  "KEEP Token balance of this address expressed in the smallest unit of the KEEP Token"
  tokenBalanceRaw: BigInt!
  "KEEP Token balance of this address expressed as a BigDecimal normalized value for the KEEP Token"
  tokenBalance: BigDecimal!
  "Total amount of KEEP Token ever held by this address expressed in the smallest unit of the KEEP Token"
  totalTokensHeldRaw: BigInt!
  "Total amount of KEEP Token ever held by this address expressed as a BigDecimal normalized value for the KEEP Token"
  totalTokensHeld: BigDecimal!
}

type TokenStaking @entity{
  id : ID!
  contractAddress: Bytes!
  initializationPeriod : BigInt
  maximumLockDuration: BigInt
  minimumStake : BigInt
  minimumStakeBase:  BigInt
  minimumStakeSchedule:  BigInt
  minimumStakeScheduleStart: BigInt
  minimumStakeSteps:  BigInt
  totalStaker: BigInt
  totalTokenStaking: BigDecimal
  totalTokenSlash : BigDecimal
  members : [Member!] @derivedFrom(field: "tokenStaking")
}

type Member @entity{
  id: ID!
  tokenStaking : TokenStaking!
  lockCreater : Bytes
  amount : BigDecimal!
  stakingState : StakingState
  until : BigInt
  undelegatedAt :  BigInt
  recoveredAt : BigInt
  transaction : [TransactionStaking!] @derivedFrom(field: "member")
}

type TransactionStaking @entity {
  id: ID!
  timestamp: BigInt
  blockNumber: BigInt
  from : String!
  to: String!
  value: BigDecimal
  gasPrice: BigInt!
  gasUsed: BigInt!
  member: Member!
  transactionType: StakingState!
}